#!/usr/bin/env python
# _*_ coding: utf-8 _*_
import io
import logging
import re
import sys
import time

# —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏
import requests
from requests.exceptions import ConnectionError
from requests.exceptions import ReadTimeout

# –º–æ–¥—É–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
import data
# –º–æ–¥—É–ª—å —Å —Ç–æ–∫–µ–Ω–∞–º–∏
import tokens
from bot_shared import my_bot

if sys.version[0] == '2':
    reload(sys)
    sys.setdefaultencoding('utf-8')


def vk_find_last_post():
    # –∫–æ–Ω–Ω–µ–∫—Ç–∏–º—Å—è –∫ API —á–µ—Ä–µ–∑ requests. –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ –¥–≤–∞ –ø–æ—Å—Ç–∞
    response = requests.get('https://api.vk.com/method/wall.get',
                            params={'access_token': tokens.vk, 'owner_id': data.vkgroup_id, 'count': 2,
                                    'offset': 0})
    try:
        # —Å–æ–∑–¥–∞—ë–º json-–æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã
        posts = response.json()['response']
    except Exception as ex:
        time.sleep(3)
        raise ex

    # –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª —Å –¥–∞—Ç–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
    try:
        file_lastdate_read = open(data.vk_update_filename, 'r', encoding='utf-8')
        last_recorded_postdate = file_lastdate_read.read()
        file_lastdate_read.close()
    except IOError:
        last_recorded_postdate = -1
        pass
    try:
        int(last_recorded_postdate)
    except ValueError:
        last_recorded_postdate = -1
        pass
    # —Å–≤–µ—Ä—è–µ–º –¥–≤–∞ –≤–µ—Ä—Ö–Ω–∏—Ö –ø–æ—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–≤–µ–∂–µ—Å—Ç–∏, —Ç.–∫. –≤–µ—Ä—Ö–Ω–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø–∏–Ω–µ–Ω
    post = posts[-2] if posts[-2]['date'] >= posts[-1]['date'] else posts[-1]
    post_date = post['date']

    # –Ω–∞–∫–æ–Ω–µ—Ü, —Å–≤–µ—Ä—è–µ–º –¥–∞—Ç—É —Å–≤–µ–∂–µ–≥–æ –ø–æ—Å—Ç–∞ —Å –¥–∞—Ç–æ–π, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –≤ —Ñ–∞–π–ª–µ
    vk_initiate = False
    if post_date > int(last_recorded_postdate):
        vk_initiate = True
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞—Ç—É –ø–æ—Å—Ç–∞ –≤ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        file_lastdate_write = open(data.vk_update_filename, 'w', encoding='utf-8')
        file_lastdate_write.write(str(post_date))
        file_lastdate_write.close()

    return post, vk_initiate


def vk_get_repost_text(post):
    original_poster_id = int(post['copy_owner_id'])
    # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ 'copy_owner_id' –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, —Ç–æ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏ —Ä–µ–ø–æ—Å—Ç –∏–∑ –≥—Ä—É–ø–ø—ã
    if original_poster_id < 0:
        response_OP = requests.get('https://api.vk.com/method/groups.getById',
                                   params={'group_ids': -original_poster_id})
        name_OP = response_OP.json()['response'][0]['name']
        screenname_OP = response_OP.json()['response'][0]['screen_name']
        # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, —á—Ç–æ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç –∏–∑ —Ç–∞–∫–æ–π-—Ç–æ –≥—Ä—É–ø–ø—ã
        return "\n\n<a href=\"<web_preview>\">üì¢</a> <a href=\"https://vk.com/wall{}_{}\">–†–µ–ø–æ—Å—Ç</a> " \
               "–∏–∑ –≥—Ä—É–ø–ø—ã <a href=\"https://vk.com/{}\">{}</a>:\n".format(data.vkgroup_id, post['id'], screenname_OP,
                                                                          name_OP)
    # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ 'copy_owner_id' –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, —Ç–æ —Ä–µ–ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    else:
        response_OP = requests.get('https://api.vk.com/method/users.get',
                                   params={'access_token': tokens.vk,
                                           'user_id': original_poster_id})
        name_OP = "{0} {1}".format(response_OP.json()['response'][0]['first_name'],
                                   response_OP.json()['response'][0]['last_name'], )
        screenname_OP = response_OP.json()['response'][0]['uid']
        # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, —á—Ç–æ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç —Ç–∞–∫–æ–≥–æ-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return ("\n\n<a href=\"<web_preview>\">üì¢</a> <a href=\"https://vk.com/wall{}_{}\">–†–µ–ø–æ—Å—Ç</a> "
                "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href=\"https://vk.com/id{}\">{}</a>:\n").format(data.vkgroup_id, post['id'],
                                                                                 screenname_OP, name_OP)


def vk_post_get_links(post):
    links = ''
    web_preview_links = []
    vk_annot_link = False
    vk_annot_doc = False
    vk_annot_video = False
    try:
        for attachment in post['attachments']:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∏ –≤ –ø–æ—Å—Ç–µ
            if 'link' in attachment:
                post_url_raw = attachment['link']['url']
                post_url = "<a href=\"{}\">{}</a>\n".format(post_url_raw, attachment['link']['title'])
                if not vk_annot_link:
                    links += '\n‚Äî –°—Å—ã–ª–∫–∞:\n'
                    vk_annot_link = True
                links += post_url
                web_preview_links.append(post_url_raw)
                print("Successfully extracted a link:\n{0}\n".format(post_url_raw))

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –ø–æ—Å—Ç–µ. GIF –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
            # –≤ vkListener
            if 'doc' in attachment and attachment['doc']['ext'] != 'gif':
                post_url_raw = attachment['doc']['url']
                doc_name = attachment['doc']['title']
                doc_size = round(attachment['doc']['size'] / 1024 / 1024, 2)
                post_url = "<a href=\"{}\">{}</a>, —Ä–∞–∑–º–µ—Ä {} –ú–±\n".format(post_url_raw, doc_name, doc_size)
                if not vk_annot_doc:
                    links += '\n‚Äî –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n'
                    vk_annot_doc = True
                links += post_url
                print("Successfully extracted a document's link:\n{0}\n".format(post_url_raw))

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ –ø–æ—Å—Ç–µ
            if 'video' in attachment:
                post_video_owner = attachment['video']['owner_id']
                post_video_vid = attachment['video']['vid']
                # TODO: fix link for youtube and other
                post_url_raw = "https://vk.com/video{}_{}".format(post_video_owner, post_video_vid)
                post_url = "<a href=\"{}\">{}</a>\n".format(post_url_raw, attachment['video']['title'])
                if not vk_annot_video:
                    links += '\n‚Äî –í–∏–¥–µ–æ:\n'
                    vk_annot_video = True
                links += post_url
                web_preview_links.insert(0, post_url_raw)
                print("Successfully extracted a video's link:\n{0}\n".format(post_url_raw))

    except KeyError:
        pass
    return links, web_preview_links


def vk_send_new_post(destination, vk_final_post, img_src, show_preview):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –Ω–∞—Ä–µ–∑–∞—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    for text in text_cuts(vk_final_post):
        my_bot.send_message(destination,
                            text,
                            parse_mode="HTML",
                            disable_web_page_preview=not show_preview)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for img in img_src:
        if img['type'] == 'img':
            my_bot.send_photo(destination, copy(img['data']))
        if img['type'] == 'gif':
            my_bot.send_document(destination, img['data'])


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –í–ö
def text_cuts(text):
    max_cut = 3000
    last_cut = 0
    dot_anchor = 0
    nl_anchor = 0

    # —è –Ω–µ –æ—á–µ–Ω—å –º–æ–≥—É –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã, —Ç–∞–∫ –≤–æ–æ–±—â–µ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å?
    if len(text) < max_cut:
        yield text[last_cut:]
        return

    for i in range(len(text)):
        if text[i] == '\n':
            nl_anchor = i + 1
        if text[i] == '.' and text[i + 1] == ' ':
            dot_anchor = i + 2

        if i - last_cut > max_cut:
            if nl_anchor > last_cut:
                yield text[last_cut:nl_anchor]
                last_cut = nl_anchor
            elif dot_anchor > last_cut:
                yield text[last_cut:dot_anchor]
                last_cut = dot_anchor
            else:
                yield text[last_cut:i]
                last_cut = i

            if len(text) - last_cut < max_cut:
                yield text[last_cut:]
                return

    yield text[last_cut:]


# –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –í–ö –≤ –ø–∞–±–ª–∏–∫–µ –ú–µ—Ö–º–∞—Ç–∞ –∏ –∫–∏–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏
def vkListener():
    try:
        # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç
        try:
            post, vk_initiate = vk_find_last_post()
        except:
            return

        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –æ–Ω –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∏–¥–∞–ª –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        vk_final_post = ''
        show_preview = False
        # –µ—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç ‚Äî –Ω–æ–≤—ã–π, —Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        if vk_initiate:
            print("{0}\nWe have new post in Mechmath's VK public.\n".format(time.strftime(data.time, time.gmtime())))
            # –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–æ—Å—Ç, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –º–µ—Ö–º–∞—Ç–æ–≤—Å–∫–æ–≥–æ –ø–æ—Å—Ç–∞
            if 'copy_owner_id' in post or 'copy_text' in post:
                if 'copy_text' in post:
                    post_text = post['copy_text']
                    vk_final_post += post_text.replace("<br>", "\n")
                # –ø—Ä–æ–±—É–µ–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—É–¥–∞ —Ä–µ–ø–æ—Å—Ç
                if 'copy_owner_id' in post:
                    vk_final_post += vk_get_repost_text(post)

            else:
                response_OP = requests.get('https://api.vk.com/method/groups.getById',
                                           params={'group_ids': -(int(data.vkgroup_id))})
                name_OP = response_OP.json()['response'][0]['name']
                screenname_OP = response_OP.json()['response'][0]['screen_name']
                vk_final_post += (
                    "\n\n<a href=\"<web_preview>\">üìÉ</a> <a href=\"https://vk.com/wall{}_{}\">–ü–æ—Å—Ç</a> –≤ –≥—Ä—É–ø–ø–µ "
                    "<a href=\"https://vk.com/{}\">{}</a>:\n").format(data.vkgroup_id, post['id'],
                                                                      screenname_OP, name_OP)
            try:
                # –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç —Ä–µ–ø–æ—Å—Ç–∞
                post_text = post['text']
                vk_final_post += post_text.replace("<br>", "\n") + "\n"
            except KeyError:
                pass
            # —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
            links, web_preview_links = vk_post_get_links(post)
            vk_final_post += links
            # –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∏–∫–∏-—Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö –≤–∏–¥–∞ '[screenname|real name]',
            # —Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ
            try:
                pattern = re.compile(r"\[([^|]+)\|([^|]+)\]", re.U)
                results = pattern.findall(vk_final_post, re.U)
                for i in results:
                    screen_name_user = i[0]
                    real_name_user = i[1]
                    link = "<a href=\"https://vk.com/{0}\">{1}</a>".format(screen_name_user, real_name_user)
                    unedited = "[{0}|{1}]".format(screen_name_user, real_name_user)
                    vk_final_post = vk_final_post.replace(unedited, link)
            except Exception as ex:
                logging.exception(ex)

            # —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ GIF
            img_src = []
            try:
                for attachment in post['attachments']:
                    # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã.
                    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—É–¥–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∫–∞–∫–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ
                    if 'photo' in attachment:
                        wegot = False
                        for size in ['src_xxbig', 'src_xbig', 'src_big', 'src']:
                            if size in attachment['photo']:
                                post_attach_src = attachment['photo'][size]
                                wegot = True
                                break

                        if wegot:
                            request_img = requests.get(post_attach_src)
                            img_vkpost = io.BytesIO(request_img.content)
                            img_src.append({'data': img_vkpost,
                                            'type': 'img'})
                            print("Successfully extracted photo URL:\n{0}\n".format(post_attach_src))
                        else:
                            print("Couldn't extract photo URL from a VK post.\n")
                    elif ('doc' in attachment
                          and ('type' in attachment['doc']
                               and attachment['doc']['type'] == 3)
                          or ('ext' in attachment['doc']
                              and attachment['doc']['ext'] == 'gif')):
                        post_attach_src = gif_vkpost = attachment['doc']['url']
                        img_src.append({'data': gif_vkpost,
                                        'type': 'gif'})
                        print("Successfully extracted GIF URL:\n{0}\n".format(post_attach_src))

            except KeyError:
                pass

            for link in web_preview_links:
                show_preview = True
                vk_final_post = vk_final_post.replace("<web_preview>", link)
                break

            vk_final_post = vk_final_post.replace("<br>", "\n")

            vk_send_new_post(data.my_chatID, vk_final_post, img_src, show_preview)
            vk_send_new_post(data.my_channel, vk_final_post, img_src, show_preview)

        time.sleep(5)
    # –∏–∑-–∑–∞ Telegram API –∏–Ω–æ–≥–¥–∞ –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –ø–∞–∫–µ—Ç –Ω–µ –¥–æ—Ö–æ–¥–∏—Ç
    except ReadTimeout:
        # logging.exception(e)
        print(
            "{0}\nRead Timeout in vkListener() function. Because of Telegram API.\n"
            "We are offline. Reconnecting in 5 seconds.\n".format(
                time.strftime(data.time, time.gmtime())))
    # –µ—Å–ª–∏ –ø—Ä–æ–ø–∞–ª–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, —Ç–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
    except ConnectionError:
        # logging.exception(e)
        print("{0}\nConnection Error in vkListener() function.\nWe are offline. Reconnecting...\n".format(
            time.strftime(data.time, time.gmtime())))
    # –µ—Å–ª–∏ Python —Å–¥—É—Ä–∏—Ç –∏ –ø–æ–π–¥—ë—Ç –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—É—é —Ä–µ–∫—É—Ä—Å–∏—é (–Ω–µ –æ—Å–æ–±–æ —Å–ø–∞—Å–∞–µ—Ç)
    except RuntimeError:
        # logging.exception(e)
        print("{0}\nRuntime Error in vkListener() function.\nRetrying in 3 seconds.\n".format(
            time.strftime(data.time, time.gmtime())))
